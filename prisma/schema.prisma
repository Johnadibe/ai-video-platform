// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  subscriptions Subscription[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Video Generation Model
model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  
  // HeyGen specific fields
  heygenId    String?  @unique
  avatarId    String?
  voiceId     String?
  script      String   @db.Text
  
  // Video metadata
  status      VideoStatus @default(PENDING)
  url         String?
  thumbnailUrl String?
  duration    Int?      // in seconds
  
  // User relation
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@map("videos")
}

enum VideoStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Subscription Model (for SaaS billing)
model Subscription {
  id                 String             @id @default(cuid())
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  stripeCustomerId   String?            @unique
  stripeSubscriptionId String?          @unique
  stripePriceId      String?
  
  status             SubscriptionStatus @default(INACTIVE)
  plan               SubscriptionPlan   @default(FREE)
  
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean            @default(false)
  
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@index([userId])
  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

enum SubscriptionPlan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

// Verification Token (for email verification)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

