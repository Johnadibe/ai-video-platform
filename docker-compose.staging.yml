version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        NODE_ENV: staging
    container_name: ai-video-platform-app-staging
    restart: always
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: staging
      DATABASE_URL: ${DATABASE_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Staging Database
  postgres:
    image: postgres:16-alpine
    container_name: ai-video-platform-db-staging
    restart: always
    ports:
      - '5435:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-ai_video_platform_staging}
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Staging Instance
  redis:
    image: redis:7-alpine
    container_name: ai-video-platform-redis-staging
    restart: always
    ports:
      - '6382:6379'
    volumes:
      - redis_data_staging:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data_staging:
  redis_data_staging:

networks:
  default:
    name: ai-video-platform-network-staging

